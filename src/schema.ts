/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/queues": {
    /** Lists queues. If you have more than 1,000 queues only 1,000 will be returned. Additionally, a cursor will be returned. In this case, you can call this operation again with the cursor value to get the next 1,000 queues */
    get: operations["list-queues"];
    /** Creates a queue */
    post: operations["create-queue"];
  };
  "/queues/{queue_id}": {
    /** Describes a queue */
    get: operations["get-queue"];
    /** Deletes a queue and all messages in it. */
    delete: operations["delete-queue"];
    parameters: {
      path: {
        /** queue id */
        queue_id: string;
      };
    };
  };
  "/queues/{queue_id}/messages": {
    /** Gets messages from a queue */
    get: operations["get-messages"];
    /** Adds a message to a queue */
    post: operations["create-message"];
    parameters: {
      path: {
        /** Queue identifier */
        queue_id: string;
      };
    };
  };
  "/queues/{queue_id}/messages/{message_id}": {
    /** Deletes a message from a queue */
    delete: operations["delete-message"];
    parameters: {
      path: {
        /** Queue identifier */
        queue_id: string;
        /** Message identifier */
        message_id: string;
      };
    };
  };
}

export interface components {
  schemas: {
    Message: components["schemas"]["MessageMetadata"] &
      components["schemas"]["MessageBody"];
    /** Metadata about a queue */
    Queue: {
      /** Queue identifier */
      queue_id: string;
      /** Optional name metadata */
      name?: string;
      /** ISO 8601 formatted date string */
      created_time: string;
      /** Length of time (in seconds) delivered messages will be invisible to other clients. */
      visibility_timeout: number;
    };
    /** The body of the message. */
    MessageBody: {
      /** Your message body as a raw string or perhaps base64 encoded if you'd like */
      message_body: string;
    };
    /** Necessary metadata about a message in the queue. Returned when adding a new message to a queue. */
    MessageMetadata: {
      /** Queue identifier for this message */
      queue_id: string;
      /** Message identifier */
      message_id: string;
      /** When the message was added to the queue, ISO 8601 formatted */
      inserted_time: string;
    };
    /** A message returned from the get-messages operation */
    PoppedMessage: components["schemas"]["MessageMetadata"] & {
      /** Token certifying receipt of the message */
      pop_receipt: string;
      /** Seconds this message will remain hidden from other clients. */
      visibility_timeout: number;
    } & components["schemas"]["MessageBody"];
  };
}

export interface operations {
  /** Lists queues. If you have more than 1,000 queues only 1,000 will be returned. Additionally, a cursor will be returned. In this case, you can call this operation again with the cursor value to get the next 1,000 queues */
  "list-queues": {
    parameters: {
      query: {
        /** String used to fetch the next 1,000 queues */
        cursor?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Array of queues */
            queues: components["schemas"]["Queue"][];
            /** If you have more than 1,000 queues only 1,000 will be returned. Additionally, a cursor will be returned. In this case, you can call this operation again with the cursor value to get the next 1,000 queues. */
            cursor?: string;
          };
        };
      };
    };
  };
  /** Creates a queue */
  "create-queue": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["Queue"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Optional name */
          name?: string;
          /** Default is 30 seconds */
          visibility_timeout?: number;
        };
      };
    };
  };
  /** Describes a queue */
  "get-queue": {
    parameters: {
      path: {
        /** queue id */
        queue_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Queue"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Deletes a queue and all messages in it. */
  "delete-queue": {
    parameters: {
      path: {
        /** queue id */
        queue_id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** Gets messages from a queue */
  "get-messages": {
    parameters: {
      path: {
        /** Queue identifier */
        queue_id: string;
      };
      query: {
        /** Maximum number of messages to fetch. */
        limit?: number;
        /** Number of seconds to hide returned messages from other clients. Overrides the queue's visibility timeout for this call. */
        visibility_timeout?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["PoppedMessage"][];
          };
        };
      };
      /** Bad Request */
      400: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** Adds a message to a queue */
  "create-message": {
    parameters: {
      path: {
        /** Queue identifier */
        queue_id: string;
      };
    };
    responses: {
      /** Accepted */
      202: {
        content: {
          "application/json": components["schemas"]["MessageMetadata"];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Your message body */
          message_body: string;
          /** Seconds to leave the message in the queue before expiring. Default is message never expires. NOT IMPLEMENTED! */
          ttl?: number;
        };
      };
    };
  };
  /** Deletes a message from a queue */
  "delete-message": {
    parameters: {
      path: {
        /** Queue identifier */
        queue_id: string;
        /** Message identifier */
        message_id: string;
      };
      query: {
        /** Token proving prior receipt of the message */
        pop_receipt: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: unknown;
    };
  };
}

export interface external {}
